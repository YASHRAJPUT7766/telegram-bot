import telebot
import yt_dlp
import os

# ‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§®‡§æ Telegram Bot Token ‡§°‡§æ‡§≤‡•á‡§Ç
BOT_TOKEN = "7764415796:AAEndEYGBZS5UJZUWY19nwBxgdT4c5G_15M"

# Telegram Bot ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç
bot = telebot.TeleBot(BOT_TOKEN)

 
# ‚úÖ ‡§ú‡§ø‡§∏ ‡§ö‡•à‡§®‡§≤ ‡§ï‡•ã ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡§æ‡§®‡§æ ‡§π‡•à ‡§â‡§∏‡§ï‡§æ username  
CHANNEL_USERNAME = "@theREALP4x" 

# ‚úÖ Function to check if user is a member of the channel
def is_user_subscribed(user_id):
    try:
        chat_member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            return True
        else:
            return False
    except:
        return False

# ‚úÖ Handle /start command
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id

    if is_user_subscribed(user_id):
        bot.reply_to(message, "‚úÖ Welcome! You have successfully joined the channel. Now send me a YouTube link.")
    else:
        bot.reply_to(
            message,
            f"‚ö†Ô∏è You must join our channel first to use this bot!\n\nüëâ [Join Now](https://t.me/{CHANNEL_USERNAME[1:]})\n\nThen click /start again.",
            parse_mode="Markdown"
        )
        return  # Stop execution if user is not subscribed

# ‚úÖ Handle YouTube video download requests
@bot.message_handler(func=lambda message: True)
def download_video(message):
    user_id = message.from_user.id

    # ‚úÖ ‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§â‡§∏‡§®‡•á ‡§ö‡•à‡§®‡§≤ ‡§ú‡•â‡§á‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç
    if not is_user_subscribed(user_id):
        bot.reply_to(
            message,
            f"‚ö†Ô∏è You must join our channel first to use this bot!\n\nüëâ [Join Now](https://t.me/{CHANNEL_USERNAME[1:]})\n\nThen click /start again.",
            parse_mode="Markdown"
        )
        return  # Stop execution if user is not subscribed

    url = message.text

    # ‚úÖ yt-dlp ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏
    ydl_opts = {
        'format': 'best[filesize<50M]',  # 50MB ‡§∏‡•á ‡§õ‡•ã‡§ü‡•á ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã‡§Ç‡§ó‡•á
        'outtmpl': 'downloaded_video.%(ext)s',
    }

    try:
        # ‚úÖ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

        # ‚úÖ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à ‡§´‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç
        for file in os.listdir():
            if file.startswith("downloaded_video"):
                with open(file, "rb") as video:
                    bot.send_video(message.chat.id, video)

                # ‚úÖ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§´‡§æ‡§á‡§≤ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç
                os.remove(file)
                break

    except Exception as e:
        bot.reply_to(message, f"‚ùå Error: {str(e)}")

# ‚úÖ ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§∞‡§® ‡§ï‡§∞‡•á‡§Ç
print("Bot is running...")
bot.polling()
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "üëã Welcome! Send me a YouTube link to download the video.")
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext
import yt_dlp

# ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§∏‡•á‡§ü‡§Ö‡§™
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
def get_video_formats(url):
    ydl_opts = {"quiet": True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        formats = []
        for f in info["formats"]:
            if f.get("format_note") and f.get("url"):
                formats.append((f["format_note"], f["url"]))  # (‡§ï‡•ç‡§µ‡§æ‡§≤‡§ø‡§ü‡•Ä, ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° URL)
        return formats

# ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§Æ‡§æ‡§Ç‡§°
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("YouTube ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

# ‡§ú‡§¨ ‡§Ø‡•Ç‡§ú‡§∞ ‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨ ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡•á
async def receive_link(update: Update, context: CallbackContext) -> None:
    url = update.message.text
    if "youtube.com" in url or "youtu.be" in url:
        formats = get_video_formats(url)
        if not formats:
            await update.message.reply_text("‡§ï‡•ã‡§à ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
            return
        
        # ‡§ï‡•ç‡§µ‡§æ‡§≤‡§ø‡§ü‡•Ä ‡§ë‡§™‡•ç‡§∂‡§®‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§ü‡§® ‡§¨‡§®‡§æ‡§®‡§æ
        keyboard = [
            [InlineKeyboardButton(f"{q}p", callback_data=url + "|" + u)] for q, u in formats if q.isdigit()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ç‡§µ‡§æ‡§≤‡§ø‡§ü‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§Æ‡§æ‡§®‡•ç‡§Ø YouTube ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

# ‡§ú‡§¨ ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ç‡§µ‡§æ‡§≤‡§ø‡§ü‡•Ä ‡§ö‡•Å‡§®‡•á
async def button_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    url, download_url = query.data.split("|")

    # ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡§®‡§æ
    await query.message.reply_text(f"‡§Ü‡§™‡§ï‡§æ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à:\n[‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç]({download_url})", parse_mode="Markdown")

# ‡§Æ‡•á‡§® ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® (‡§¨‡•â‡§ü ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)
def main():
    TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"  # ‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§®‡§æ ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§¨‡•â‡§ü ‡§ï‡§æ ‡§ü‡•ã‡§ï‡§® ‡§°‡§æ‡§≤‡•á‡§Ç
    app = Application.builder().token(TOKEN).build()

    # ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_link))
    app.add_handler(CallbackQueryHandler(button_callback))

    # ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§è‡§Å
    app.run_polling()

if __name__ == "__main__":
    main()
def download_video(message):
    url = message.text

    # yt-dlp ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏
    ydl_opts = {
        'format': 'best[filesize<50M]',  # 50MB ‡§∏‡•á ‡§õ‡•ã‡§ü‡•á ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã‡§Ç‡§ó‡•á
        'outtmpl': 'downloaded_video.%(ext)s',
    }

    try:
        # ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

        # ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à ‡§´‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç
        for file in os.listdir():
            if file.startswith("downloaded_video"):
                with open(file, "rb") as video:
                    bot.send_video(message.chat.id, video)

                # ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§´‡§æ‡§á‡§≤ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç
                os.remove(file)
                break

    except Exception as e:
        bot.reply_to(message, f"‚ùå Error: {str(e)}")

# ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§∞‡§® ‡§ï‡§∞‡•á‡§Ç
print("Bot is running...")
bot.polling()